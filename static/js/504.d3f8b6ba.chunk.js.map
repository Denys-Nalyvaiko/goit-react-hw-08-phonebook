{"version":3,"file":"static/js/504.d3f8b6ba.chunk.js","mappings":"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","sources":["redux/contacts/selectContacts.js","components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","components/ContactItem/ContactItem.jsx","redux/filter/selectFilter.js","components/ContactList/ContactListDemo.styled.jsx","css/Containers/Container.styled.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","css/Containers/ContactsContainer.styled.jsx","pages/ContactsPage.jsx"],"sourcesContent":["export const selectContacts = state => state.contacts.list;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n","import styled from '@emotion/styled';\nimport { TextField } from '@mui/material';\nimport { Box } from '@mui/system';\n\nexport const FormBox = styled(Box)`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 12px;\n`;\n\nexport const TextInput = styled(TextField)({\n  '& label': {\n    color: '#f6d9b1',\n  },\n\n  '& .MuiOutlinedInput-root': {\n    '& fieldset': {\n      borderColor: '#f6d9b1',\n    },\n  },\n});\n","import { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { nanoid } from 'nanoid';\nimport { Notify } from 'notiflix';\nimport Button from '@mui/material/Button';\nimport ReactInputMask from 'react-input-mask';\nimport { addContact } from '../../redux/contacts/contactsOperations';\nimport { selectContacts } from '../../redux/contacts/selectContacts';\nimport { FormBox, TextInput } from './ContactForm.styled';\n\nexport const ContactForm = () => {\n  const [name, setName] = useState('');\n  const [phone, setPhone] = useState('');\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const options = {\n    name: setName,\n    phone: setPhone,\n  };\n  const nameInputId = nanoid();\n  const phoneInputId = nanoid();\n\n  const handleFormSubmit = event => {\n    event.preventDefault();\n\n    const currentContact = { name, phone };\n    const isContactNameAlreadyExist = contacts.find(\n      ({ name }) =>\n        name.toLowerCase().trim() === currentContact.name.toLowerCase().trim()\n    );\n\n    if (isContactNameAlreadyExist) {\n      Notify.failure('Contact with this name already exist');\n      return;\n    }\n\n    dispatch(addContact(currentContact));\n    reset();\n  };\n\n  const handleInputChange = event => {\n    const { name, value } = event.currentTarget;\n    options[name](value);\n  };\n\n  const reset = () => {\n    setName('');\n    setPhone('');\n  };\n\n  return (\n    <FormBox\n      component=\"form\"\n      sx={{\n        '& > :not(style)': {\n          m: 1,\n          width: '32ch',\n          input: { color: '#f6d9b1' },\n        },\n      }}\n      action=\"submit\"\n      onSubmit={handleFormSubmit}\n    >\n      <TextInput\n        label=\"Name\"\n        variant=\"outlined\"\n        type=\"text\"\n        name=\"name\"\n        id={nameInputId}\n        value={name}\n        required\n        onChange={handleInputChange}\n      />\n      <ReactInputMask\n        mask=\"999-999-9999\"\n        maskChar=\"\"\n        value={phone}\n        onChange={handleInputChange}\n      >\n        {() => (\n          <TextInput\n            label=\"Phone\"\n            variant=\"outlined\"\n            type=\"tel\"\n            name=\"phone\"\n            id={phoneInputId}\n            required\n          />\n        )}\n      </ReactInputMask>\n      <Button variant=\"outlined\" type=\"submit\">\n        Add contact\n      </Button>\n    </FormBox>\n  );\n};\n","import { useDispatch } from 'react-redux';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\nimport ListItemText from '@mui/material/ListItemText';\nimport Avatar from '@mui/material/Avatar';\nimport IconButton from '@mui/material/IconButton';\nimport PersonIcon from '@mui/icons-material/Person';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport { deleteContact } from '../../redux/contacts/contactsOperations';\n\nexport const ContactItem = ({ id, name, phone }) => {\n  const dispatch = useDispatch();\n\n  const handleDeleteButtonClick = id => {\n    dispatch(deleteContact(id));\n  };\n\n  return (\n    <ListItem\n      secondaryAction={\n        <IconButton\n          edge=\"end\"\n          aria-label=\"delete\"\n          onClick={() => handleDeleteButtonClick(id)}\n        >\n          <DeleteIcon color=\"primary\" />\n        </IconButton>\n      }\n    >\n      <ListItemAvatar>\n        <Avatar sx={{ backgroundColor: '#f6d9b1', color: '#252525' }}>\n          <PersonIcon fontSize=\"large\" />\n        </Avatar>\n      </ListItemAvatar>\n      <ListItemText\n        primary={name}\n        secondary={phone}\n        primaryTypographyProps={{ color: '#f6d9b1' }}\n        secondaryTypographyProps={{ color: '#dca75d' }}\n        sx={{ textTransform: 'capitalize' }}\n      />\n    </ListItem>\n  );\n};\n","export const selectFilter = state => state.filter.value;\n","import { styled } from '@mui/material/styles';\n\nexport const Demo = styled('div')(() => ({\n  backgroundColor: '#252525',\n}));\n","import styled from '@emotion/styled';\n\nexport const Title = styled.h1`\n  margin-bottom: 20px;\n  color: #dca75d;\n`;\n\nexport const InfoTitle = styled.h3`\n  color: #b36a06;\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { useEffect } from 'react';\nimport Box from '@mui/material/Box';\nimport List from '@mui/material/List';\nimport Grid from '@mui/material/Grid';\nimport { ContactItem } from 'components/ContactItem/ContactItem';\nimport {\n  selectContacts,\n  selectError,\n  selectIsLoading,\n} from '../../redux/contacts/selectContacts';\nimport { selectFilter } from '../../redux/filter/selectFilter';\nimport { fetchContacts } from '../../redux/contacts/contactsOperations';\nimport { Demo } from './ContactListDemo.styled';\nimport { InfoTitle } from 'css/Containers/Container.styled';\n\nexport const ContactList = () => {\n  const contacts = useSelector(selectContacts);\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const updateFilteredList = () => {\n    const validFilter = filter.toLowerCase().trim();\n\n    return contacts.filter(({ name }) =>\n      name.toLowerCase().includes(validFilter)\n    );\n  };\n\n  const filteredContacts = updateFilteredList();\n  const isListEmpty = !filteredContacts.length && !isLoading && !error;\n\n  return (\n    <>\n      {isLoading && <InfoTitle>Loading ...</InfoTitle>}\n\n      {isListEmpty && <InfoTitle>The contact list is empty</InfoTitle>}\n\n      {filteredContacts && (\n        <Box sx={{ flexGrow: 1, maxWidth: 752 }}>\n          <Grid item xs={12} md={6}>\n            <Demo>\n              <List>\n                {filteredContacts\n                  .map(({ id, name, phone }) => (\n                    <ContactItem key={id} id={id} name={name} phone={phone} />\n                  ))\n                  .toReversed()}\n              </List>\n            </Demo>\n          </Grid>\n        </Box>\n      )}\n\n      {error && !contacts.length && (\n        <InfoTitle>Requets Error - {error}</InfoTitle>\n      )}\n    </>\n  );\n};\n","import styled from '@emotion/styled';\nimport { TextField } from '@mui/material';\n\nexport const TextInput = styled(TextField)({\n  '& label': {\n    color: '#f6d9b1',\n  },\n\n  '& .MuiOutlinedInput-root': {\n    '& fieldset': {\n      borderColor: '#f6d9b1',\n    },\n  },\n});\n","import { useDispatch, useSelector } from 'react-redux';\nimport { nanoid } from 'nanoid';\nimport { updateFilter } from '../../redux/filter/filterSlice';\nimport { selectFilter } from '../../redux/filter/selectFilter';\nimport { TextInput } from './Filter.styled';\n\nexport const Filter = () => {\n  const filterValue = useSelector(selectFilter);\n  const dispatch = useDispatch();\n  const filterInputId = nanoid();\n\n  const handleFilterInputChange = event => {\n    const { value } = event.currentTarget;\n    dispatch(updateFilter(value));\n  };\n\n  return (\n    <TextInput\n      label=\"Find contacts by name\"\n      type=\"text\"\n      name=\"filter\"\n      id={filterInputId}\n      value={filterValue}\n      onChange={handleFilterInputChange}\n      variant=\"outlined\"\n      sx={{\n        '& > :not(style)': {\n          m: 1,\n          width: '32ch',\n          input: { color: '#f6d9b1' },\n          marginBottom: '20px',\n        },\n      }}\n    />\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const ContactsContainer = styled.section`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  gap: calc(10% + 20px);\n  padding: 20px 100px;\n`;\n\nexport const ContactsTitle = styled.h2`\n  margin-bottom: 20px;\n  color: #dca75d;\n`;\n","import { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\nimport { Title } from 'css/Containers/Container.styled';\nimport {\n  ContactsContainer,\n  ContactsTitle,\n} from 'css/Containers/ContactsContainer.styled';\n\nconst ContactsPage = () => (\n  <ContactsContainer>\n    <div>\n      <Title>Phonebook</Title>\n      <ContactForm />\n    </div>\n    <div>\n      <ContactsTitle>Contacts</ContactsTitle>\n      <Filter />\n      <ContactList />\n    </div>\n  </ContactsContainer>\n);\n\nexport default ContactsPage;\n"],"names":["selectContacts","state","contacts","list","selectIsLoading","isLoading","selectError","error","FormBox","styled","Box","_templateObject","_taggedTemplateLiteral","TextInput","TextField","color","borderColor","ContactForm","_useState","useState","_useState2","_slicedToArray","name","setName","_useState3","_useState4","phone","setPhone","dispatch","useDispatch","useSelector","options","nameInputId","nanoid","phoneInputId","handleInputChange","event","_event$currentTarget","currentTarget","value","reset","_jsxs","component","sx","m","width","input","action","onSubmit","preventDefault","currentContact","find","_ref","toLowerCase","trim","Notify","addContact","children","_jsx","label","variant","type","id","required","onChange","ReactInputMask","mask","maskChar","Button","ContactItem","ListItem","secondaryAction","IconButton","edge","onClick","deleteContact","handleDeleteButtonClick","DeleteIcon","ListItemAvatar","Avatar","backgroundColor","PersonIcon","fontSize","ListItemText","primary","secondary","primaryTypographyProps","secondaryTypographyProps","textTransform","selectFilter","filter","Demo","Title","InfoTitle","_templateObject2","ContactList","useEffect","fetchContacts","filteredContacts","validFilter","includes","updateFilteredList","isListEmpty","length","_Fragment","flexGrow","maxWidth","Grid","item","xs","md","List","map","_ref2","toReversed","Filter","filterValue","filterInputId","updateFilter","marginBottom","ContactsContainer","ContactsTitle"],"sourceRoot":""}